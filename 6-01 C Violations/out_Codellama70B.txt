Meaningful names for variables, constants, and functions:
The variable g is not meaningful. It should be renamed to something more descriptive, such as global_variable.
Good indentation (3 or 4 spaces):
The indentation in the calculateArea function is inconsistent. It should be indented properly.
If variables have the same type, declare them on the same line if possible:
The variables r and area in the calculateArea function should be declared on the same line.
Leave one blank line between variable declarations and the first line of code in a function:
There should be a blank line between the variable declarations in the displayPoints function and the first line of code.
Consistent style (e.g., use of curly brackets):
The while loop in the displayPoints function should use curly brackets.
Opening brace must be on the same line as conditional or function:
The opening brace of the while loop in the displayPoints function should be on the same line as the conditional.
Define values as constants when needed (do not use variables for constants):
The number 3.1415 in the calculateArea function should be defined as a constant.
#defined constants must be in uppercase:
The constant defined in the calculateArea function should be in uppercase.
In your code you should leave one blank space between operators:
The assignment operator in the calculateArea function should have a space on both sides.
Leave one space after a comma:
The commas in the printf statements in the displayPoints and calculateArea functions should have a space after them.
If the code is too complicated to be read on its own, simplify/split/rename variables:
The while loop in the displayPoints function could be simplified by using a for loop instead.
Use braces; avoid loops and conditionals without them:
The if statement in the while loop in the displayPoints function should use curly brackets.
Use parentheses for clarity, especially with bit operations:
The condition in the if statement in the while loop in the displayPoints function should use parentheses for clarity.
Avoid global variables where they are unnecessary:
The global variable g should be removed or made local to the main function.
If p is a pointer to a structure, you should access members by using p->member rather than (*p).member:
The member access in the while loop in the displayPoints function should use the -> operator instead of (*p)..
If p is a pointer to a structure, do not surround the -> operator with spaces:
The -> operator in the while loop in the displayPoints function should not have spaces around it.
You should avoid source lines exceeding 80 characters:
The while loop in the displayPoints function should be split into multiple lines to avoid exceeding 80 characters.
Use the indent utility (after setting the alias as described in the grace info folder indent_utility_info.txt) and run it against a copy of your code. Compare the indentation generated by the utility and your original code:
The indentation in the calculateArea function should be corrected.
You must avoid code duplication:
The while loop in the displayPoints function should be simplified to avoid code duplication.
Make sure you read all the information on this page. You will lose credit if you don't follow the suggestions we have defined:
The code should be reviewed to ensure it follows all the guidelines.
Here is the corrected code:

#include <stdio.h>

struct Point {
    int x, y;
};

void calculateArea() {
    int r = 5;
    float area = 3.1415 * r * r;
    printf("Area: %f\n", area);
}

void displayPoints(struct Point *points, int count) {
    int i = 0;
    struct Point *p = points;
    while (i < count) {
        if (p->x > 10) {
            printf("Point %d: x = %d, y = %d\n", i++, p->x, p->y);
        } else {
            i++;
        }
    }
}

int main() {
    struct Point points[] = {{12, 5}, {3, 4}, {15, 10}, {7, 8}};
    displayPoints(points, 4);
    calculateArea();
    return 0;
}
The corrected code follows all the guidelines and is more readable and maintainable.
